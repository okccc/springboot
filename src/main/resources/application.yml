# yaml(Yet Another Markup Language) 另一种标记语言
# yaml树形结构层次清晰,不用写大量重复的key,可读性好,输入关键字有完整提示,冒号后面必须有空格
# 配置项官方文档
# https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#appendix.application-properties.server
# https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#appendix.application-properties.core
# https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#appendix.application-properties.web
# https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#appendix.application-properties.data

# server配置(org.springframework.boot.autoconfigure.web.ServerProperties)
server:
  # 端口号
  port: 8080
  # 项目根路径
  servlet:
    context-path: /
  # 当发生错误时会将错误请求转发给/error,也就是SpringBoot的默认白页 http://localhost:8080/error
  error:
    path: /error

# spring配置
spring:
  # spring.web配置(org.springframework.boot.autoconfigure.web.WebProperties)
  web:
    # 静态资源
    resources:
      # 静态资源默认放在static目录,且请求路径不需要加目录名称localhost:8080/a.html
      # 那我就想放到webapp目录下呢,手动修改配置参数即可,此时默认的静态资源目录就无法访问了
      static-locations: classpath:/webapp
      # 开启静态资源映射规则
      add-mappings: true
      # 缓存配置
      cache:
        cachecontrol:
          # 缓存周期(秒)
          max-age: 3600
          # 共享缓存
          cache-public: true
        # 和服务器比对资源的最后一次修改时间,如果没变就直接使用本地缓存,节省服务器资源,F12响应状态码304表示使用了缓存
        use-last-modified: true

  # spring.mvc配置(org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties)
  mvc:
    # 路径匹配规则：默认是新版策略path_pattern_parser,可以切换成老版策略ant_path_matcher
    pathmatch:
      matching-strategy: ant_path_matcher
    # 内容协商
    contentnegotiation:
      # 基于请求参数的内容协商,默认关闭
      favor-parameter: true
      # 参数名默认format,也可以手动指定,比如改成type
      parameter-name: format
      # 增加一种新的媒体类型
      media-types:
        yaml: text/yaml

  # thymeleaf配置(org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties)
  thymeleaf:
    prefix: classpath:/templates/
    suffix: .html
    # 开发期间关闭缓存,页面一改就能看到效果,上线后再开启
    cache: false
    # 渲染模板之前会先检查是否存在,关闭可以提升运行速度
    check-template: false

  # 国际化配置(org.springframework.boot.autoconfigure.context.MessageSourceProperties)
  messages:
    basename: messages
    encoding: UTF-8

  # 数据源配置(org.springframework.boot.autoconfigure.jdbc.DataSourceProperties)
  datasource:
    type: com.zaxxer.hikari.HikariDataSource
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/ssm?characterEncoding=utf8&useSSL=false&serverTimezone=GMT%2B8&rewriteBatchedStatements=true&allowPublicKeyRetrieval=true&allowMultiQueries=true
    username: root
    password: root@123

# mybatis配置(org.mybatis.spring.boot.autoconfigure.MybatisProperties)
mybatis:
  # settings
  configuration:
    # 日志实现,SLF4J/LOG4J2/STDOUT_LOGGING
    log-impl: org.apache.ibatis.logging.slf4j.Slf4jImpl
    # 将下划线映射成驼峰规则
    map-underscore-to-camel-case: true
    # 设置映射范围,NONE/PARTIAL/FULL
    auto-mapping-behavior: full
    # 开启延迟加载,需要啥就查啥而不是一次性全部查出来,可以对比DEBUG信息执行的sql条数
    lazy-loading-enabled: true
    # 开启缓存,可以对比DEBUG信息执行的sql次数
    cache-enabled: true
  # typeAliases
  type-aliases-package: com.okccc.bean
  # mappers
  mapper-locations: classpath:/mapper/*.xml

# 日志相关配置(推荐使用logback-spring.xml)
logging:
  # 时间格式
  pattern:
    dateformat: yyyy-MM-dd HH:mm:ss:SSS
  # 日志分组
  group:
    g01: com.okccc.controller, com.okccc.service
    g02: com.okccc.mapper
  # 日志级别
  level:
    root: info
    web: info
    sql: debug
    g01: info
    g02: debug
  # 输出到文件
  file:
    name: /tmp/app.log
  # 文件归档与滚动和切割
  logback:
    rollingpolicy:
      file-name-pattern: app.%d{yyyy-MM-dd}.%i.gz
      max-file-size: 1MB